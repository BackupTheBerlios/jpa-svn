API bloxera opiera sie na API XML-RPC Bloggera. Adres uslugi: http://www.blox.pl/xmlrpc, 
Wywolywane metody trzeba poprzedzic prefixem blogger., a wiec blogger.newPost itd
Lista zaimplementowanych metod jest nastepujaca (kawalek interfejsu w javie):

 /**
  * Adds a post for the given weblog.
  *
  * @see <a href="http://www.blogger.com/developers/api/1_docs/xmlrpc_newPost.html">Blogger API</a>
  *
  * @param appkey ignored.
  * @param blogid Unique identifier of the blog the post will be added to.
  * @param username username for the site; the user must have privileges to post to the weblog
  *        as either the weblog owner or a member of the owner group.
  * @param password the user's password.
  * @param content contents of the post.
  * @param publish true if the post should be publicly available.
  * @return unique identifier of created post.
  * @throws XmlRpcException if an error occurs.
  */
  public String newPost(String appkey, String blogid, String username, String password, String content, boolean publish) throws XmlRpcException;

  /**
   * Modifies given post.
   *
   * @see <a href="http://www.blogger.com/developers/api/1_docs/xmlrpc_editPost.html">Blogger API</a>
   *
   * @param appkey ignored.
   * @param postid unique identifier of the post.
   * @param username username for the site; the user must have privileges to post to the weblog
   *        as either the weblog owner or a member of the owner group.
   * @param password the user's password.
   * @param content contents of the post.
   * @param publish true if the post should be publicly available.
   * @return true if the post has been successfully modified.
   * @throws XmlRpcException if an error occurs.
   */
  public boolean editPost(String appkey, String postid, String username, String password, String content, boolean publish) throws XmlRpcException;

  /**
   * Gets post from the weblog given its identifier.
   *
   * @see <a href="http://xmlrpc.free-conversant.com/docs/bloggerAPI#getPost">Blogger API</a>
   *
   * @param appkey ignored. 
   * @param postid unique identifier of the post.
   * @param username username for the site; the user must have privileges to post to the weblog
   *        as either the weblog owner or a member of the owner group.
   * @param password the user's password.
   * @return post found.
   * @throws XmlRpcException if an error occurs.
   */
  public Hashtable getPost(String appkey, String postid, String username, String password) throws XmlRpcException;

  /**
   * Gets most recent posts from the given weblog.
   * 
   * @see <a href="http://xmlrpc.free-conversant.com/docs/bloggerAPI#getRecentPosts">Blogger API</a>
   * 
   * @param appkey ignored.
   * @param blogid string identyfing the weblog.
   * @param username username for the site; the user must have privileges to post to the weblog
   *        as either the weblog owner or a member of the owner group.
   * @param password the user's password.
   * @param numberOfPosts number of most recent posts to be returned.
   * @return collection of "Post" objects wrapped in <code>Hashtable</code>.
   * @throws XmlRpcException if an error occurs.
   */
  public Vector getRecentPosts(String appkey, String blogid, String username, String password, int numberOfPosts) throws XmlRpcException;

  /**
   * Removes post from the weblog.
   *
   * @see <a href="http://xmlrpc.free-conversant.com/docs/bloggerAPI#deletePost">Blogger API</a>
   *
   * @param appkey ignored.
   * @param postid unique identifier of the post.
   * @param username username for the site; the user must have privileges to post to the weblog
   *        as either the weblog owner or a member of the owner group.
   * @param password the user's password.
   * @param publish ignored.
   * @return <code>true</code>.
   * @throws XmlRpcException if an error occurs.
   */
  public boolean deletePost(String appkey, String postid, String username, String password, boolean publish) throws XmlRpcException;

  /**
   * Gets all weblogs for the given user.
   *
   * @see <a href="http://www.blogger.com/developers/api/1_docs/xmlrpc_getUsersBlogs.html">Blogger API</a>
   *
   * @param appkey ignored.
   * @param username username for the site; the user must have privileges to post to the weblog
   *        as either the weblog owner or a member of the owner group.
   * @param password the user's password.
   * @return collection of <code>Hashtable</code> object containing "UserBlog" object.
   * @throws XmlRpcException if an error occurs.
   */
  public Vector getUsersBlogs(String appkey, String username, String password) throws XmlRpcException;

  /**
   * Gets user information.
   * 
   * <i>Note: it is not used as of right now.</i>
   * 
   * @see <a href="http://www.blogger.com/developers/api/1_docs/xmlrpc_getUserInfo.html">Blogger API</a>
   *
   * @param appkey ignored.
   * @param username username for the site; the user must have privileges to post to the weblog
   *        as either the weblog owner or a member of the owner group.
   * @param password the user's password.
   * @return "UserInfo" object wrapped in <code>Hashtable</code>.
   * @throws XmlRpcException if an error occurs.
   */
  public Hashtable getUserInfo(String appkey, String username, String password) throws XmlRpcException;


Obiekt klasy Post jest zwracany jako tablica z wartosciami przypisanymi do kluczy:
"content", "userid", "postid", "dateCreated"

Obiekt klasy UserBlog jako tablica:
"blogid", "url", "blogName"

obiekt klasy UserInfo jako tablica, obecna implementacja zwraca tylko wartosc dla klucza:
"userid"

Wszystkie wartosci w tych tablicach pierwotnie sa typu String, dateCreated - Date.
Parametr postId z wywolan procedur pierwotnie ma typ Long. Typowanie dotyczy jezyka java. 



